/*

INTRO TO DATA MANAGEMENT
HOMEWORK 5: PL / SQL

by
Abhinav Sharma      ass2575
Allie Touchstone    awt529
Aritra Chowdhury    ac79277
Avery Shepherd      ams9694
Harsh Mehta         hdm564
Vishal Gupta        vg22846

This Homework was worked on by all 6 people and the best combination of code was ultimately decided on. 

*/

SET SERVEROUTPUT ON;

--- QUESTION 1

--- Part (a)
/*

Write a script that uses an anonymous block of PL/SQL code to declare a variable called count_reservations and set it to the count of all reservations placed by the customer whose ID is 100002. 
If the count is greater than 15, then the block should display a message that says, “The customer has placed more than 15 reservations.” 
Otherwise, the block output should say “The customer has placed 15 or fewer reservations.” 
Make sure that you set the server output to be on before the PL/SQL block of code and include that at the top of your submission.

*/

DECLARE
    count_reservations NUMBER(9);
    
BEGIN
    SELECT COUNT(reservation_id)
    INTO count_reservations
    FROM reservation
    WHERE customer_id = 100002;
    
    IF count_reservations > 15 THEN
        DBMS_OUTPUT.PUT_LINE('The customer has placed more than 15 reservations.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The customer has placed 15 or fewer reservations.');
    END IF;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occured in the script');
        
END;
/

--- Part (b)
--- Delete the record that has reservation ID = 318 from the reservation_details and reservation tables. Do NOT commit.

DELETE
FROM reservation_details
WHERE reservation_id = 318;
    
DELETE
FROM reservation
WHERE reservation_id = 318;

--- Part (c)
--- Run your PL/SQL again. You should get a different output.

DECLARE
    count_reservations NUMBER(9);
    
BEGIN
    SELECT COUNT(reservation_id)
    INTO count_reservations
    FROM reservation
    WHERE customer_id = 100002;
    
    IF count_reservations > 15 THEN
        DBMS_OUTPUT.PUT_LINE('The customer has placed more than 15 reservations.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The customer has placed 15 or fewer reservations.');
    END IF;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occured in the script');
        
END;
/

--- Part (d)
--- Rollback your deletion.

ROLLBACK;


--- QUESTION 2
/* 

Run the “set define on;” command to allow substitution variables.  
Update the previous statement but this time prompt the user to enter a customer ID and dynamically use that input to pull the count of reservations for the customer ID the user entered.  
Also update the output as well to include the customer ID and the count of reservations like so:
e.g. When you prompt the user and they enter 100002, it should return something like “The customers with customer ID: 100002, has placed more than 15 reservations.” 
If you enter a customer ID = 100003, it should say something like “The customers with customer ID: 100003, has placed 15 or fewer reservations.”. 
Hint: you’ll need to adjust the SELECT to pull in customer ID with the count which will create a new to aggregate (i.e. group) data.

*/

SET DEFINE ON;

DECLARE
    count_reservations NUMBER(9);
    customer_id_var reservation.customer_id%TYPE;
    
BEGIN
    customer_id_var := &customer_id;
    
    SELECT customer_id, COUNT(reservation_id)
    INTO customer_id_var, count_reservations
    FROM reservation
    WHERE customer_id = customer_id_var
    GROUP BY customer_id;
    
    IF count_reservations > 15 THEN
        DBMS_OUTPUT.PUT_LINE('The customers with customer ID: ' || customer_id_var || ', has placed more than 15 reservations.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The customers with customer ID: ' || customer_id_var || ', has placed 15 or fewer reservations.');
    END IF;
        
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occured in the script');
        
END;
/


--- QUESTION 3
/* 

Write a script that uses an anonymous block of PL/SQL code that attempts to insert a new customer into the customer table. 
Just utilize the customer_id_seq to assign the customer_id. 
Make up your own data. Only fill in the fields that require a value. 
Use a column list to complete the insert statement. 
Also commit after the data has been inserted. 
If the insert is successful, the PL/SQL code should display this message:
    1 row was inserted into the customer table.
If the update is unsuccessful, the procedure should display this message:
    Row was not inserted. Unexpected exception occurred.

*/

BEGIN

    INSERT INTO customer(customer_id, first_name, last_name, email, phone, address_line_1, city, state, zip)
    VALUES (customer_id_seq.nextval, 'Ari', 'Chowdhury', 'aritra.chowdhury@utexas.edu', '737-895-2576', 'Tanglewood', 'AUS', 'TX', '78751');
    
    DBMS_OUTPUT.PUT_LINE('1 row was inserted into the customer table.');
    
    COMMIT;
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Row was not inserted. Unexpected exception occurred.');

END;
/


--- QUESTION 4
/*

Write a script that uses an anonymous block of PL/SQL code that uses a bulk collect to capture a list of available features that begin with the letter P. 
The rows in this result set should be sorted by feature name. 
Then, the code should display a string variable for each feature and its feature.  
NOTE: We’re to just going to assign a number for the feature based on it’s place in the list and not its actual feature_id. 
Your output should look like this: 
    Hotel feature 1: Parking Included
    Hotel feature 2: Pets Allowed
    Hotel feature 3: Pets Not Allowed
    Hotel feature 4: Pool

*/

DECLARE 
    TYPE features_table     IS TABLE OF VARCHAR2(40);
    available_features      features_table;
BEGIN 
    SELECT feature_name
    BULK COLLECT INTO available_features
    FROM features
    WHERE feature_name LIKE 'P%'
    ORDER BY feature_name;
    
    FOR i IN 1..available_features.COUNT LOOP
        DBMS_OUTPUT.PUT_LINE('Hotel feature ' || i || ': ' || available_features(i));
    END LOOP;
END;
/


--- QUESTION 5
/*

Write a more complex version of the previous script that uses a cursor to capture the location name, city, and feature name.  
Then output the rows like the shortened sample list below which is sorted by location name, city, and feature name. 
***3 bonus points will be given if you can prompt the user for a city and then change the outputted list  to output the location name, city, and feature name for that city.***
    Balcones Canyonlands Cabins in Marble Falls has feature: Business Center
    Balcones Canyonlands Cabins in Marble Falls has feature: Free Breakfast
    Balcones Canyonlands Cabins in Marble Falls has feature: Full Kitchen
    Balcones Canyonlands Cabins in Marble Falls has feature: Parking Included

*/

DECLARE
    city_var location.city%TYPE;

    CURSOR features_cursor IS
        SELECT l.location_name, l.city, f.feature_name
        FROM features f
            INNER JOIN location_features_linking d
                ON f.feature_id = d.feature_id
            INNER JOIN location l
                ON d.location_id = l.location_id
        WHERE l.city = city_var
        ORDER BY l.location_name, l.city, f.feature_name;

BEGIN
    city_var := '&city';
    
    FOR features IN features_cursor LOOP
        DBMS_OUTPUT.PUT_LINE(features.location_name || ' in ' || features.city || ' has feature: ' || features.feature_name); 
    END LOOP;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Unexpected exception occurred.');

END;
/


--- QUESTION 6
/*

Take your script from problem 3 and change it from an anonymous block of PL/SQL code to a named procedure called insert_customer that allows you to 
    insert a new customer by passing in customer ID, first name, last name, email, phone, address_line_1, city, state, and zip. 
Make sure that you are still using the sequence to generate the customer ID.  
Handle exceptions generally by rolling back the transaction “when others” occurs. 
Once your procedure compiles correctly, test it with the following calls.
    CALL insert_customer ('Joseph', 'Lee', 'jo12@yahoo.com', '773-222-3344', 'Happy street', 'Chicago', 'Il', '60602');
    BEGIN
    Insert_customer ('Mary', 'Lee', 'jo34@yahoo.com', '773-222-3344', 'Happy street', 'Chicago', 'Il', '60602');
    END;
    /  

*/

CREATE OR REPLACE PROCEDURE insert_customer
(   
    first_name_param        customer.first_name%TYPE,
    last_name_param         customer.last_name%TYPE,
    email_param             customer.email%TYPE,
    phone_param             customer.phone%TYPE,
    address_line_1_param    customer.address_line_1%TYPE,
    city_param              customer.city%TYPE,
    state_param             customer.state%TYPE,
    zip_param               customer.zip%TYPE
)
AS
BEGIN
    INSERT INTO customer(customer_id, first_name, last_name, email, phone, address_line_1, city, state, zip)
    VALUES (customer_id_seq.nextval, first_name_param, last_name_param, email_param, phone_param, address_line_1_param, city_param, state_param, zip_param);

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END;
/

-- Test Scripts

CALL insert_customer ('Joseph', 'Lee', 'jo12@yahoo.com', '773-222-3344', 'Happy street', 'Chicago', 'Il', '60602');

BEGIN
    insert_customer ('Mary', 'Lee', 'jo34@yahoo.com', '773-222-3344', 'Happy street', 'Chicago', 'Il', '60602');
END;
/
        

--- QUESTION 7
/*

Create a function called hold_count that returned the total number of rooms that a customer has reserved when it is passed a customer_id. 
Once you have compiled your function, test it using the following select statement:
    select customer_id, hold_count(customer_id)  
    from reservation
    group by customer_id
    order by customer_id;

*/

CREATE OR REPLACE FUNCTION hold_count
(
    customer_id_param reservation.customer_id%TYPE
)
RETURN NUMBER
AS
    reserved_room_count NUMBER;
BEGIN
    SELECT COUNT(m.room_id)
    INTO reserved_room_count
    FROM room m
        INNER JOIN reservation_details d
            ON m.room_id = d.room_id
        INNER JOIN reservation r
            ON d.reservation_id = r.reservation_id
    WHERE r.customer_id = customer_id_param;
    
    RETURN reserved_room_count;
END;
/

-- Test Script

select customer_id, hold_count(customer_id)  
from reservation
group by customer_id
order by customer_id;
/
